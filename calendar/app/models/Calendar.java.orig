package models;

import java.util.ArrayList;
<<<<<<< HEAD
=======
import java.util.Arrays;
>>>>>>> origin/exp_gui
import java.util.Date;
import java.util.List;

import javax.persistence.Entity;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
<<<<<<< HEAD
import javax.persistence.Query;
import javax.persistence.TemporalType;
=======
import javax.persistence.OneToMany;
import javax.persistence.Query;
>>>>>>> origin/exp_gui

import org.joda.time.DateTime;

import play.db.jpa.JPA;
import play.db.jpa.Model;
import utilities.DayContainer;

@Entity
public class Calendar extends Model {
<<<<<<< HEAD

    public String name;

    @ManyToOne
    public User owner;

    @ManyToMany(mappedBy = "calendars")
    public List<Event> events;
=======
	public String name;
>>>>>>> origin/exp_gui

    public Calendar(String name, User owner) {
	this.name = name;
	this.owner = owner;
	this.events = new ArrayList<Event>();
    }

    public List<Event> getAllEventsOnDay(User user, Date aDate) {
	Date start = new DateTime(aDate).withTime(0, 0, 0, 0).toDate();
	Date end = new DateTime(aDate).withTime(23, 59, 59, 999).toDate();
	Query query = JPA
		.em()
		.createQuery(
			"from Event where lowerBound <= :start and upperBound >= :end  order by start")
		.setParameter("start", start, TemporalType.DATE)
		.setParameter("end", end, TemporalType.DATE);

	List<Event> events = query.getResultList();
	List<Event> copy = new ArrayList<Event>();

	for (Event ev : events) {
	    if (ev.calendars.contains(this)) {
		if (this.owner.equals(user)) {
		    copy.add(ev);
		} else {
		    if (ev.isPublic) {
			copy.add(ev);
		    }
		}
	    }
	}

<<<<<<< HEAD
	return copy;
    }

    public List<Event> getFollowingEvents() {
	List<Event> followingEvents = new ArrayList<Event>();
	for (Event ev : this.events) {
	    /*
	     * check if the owner of the calendar is equals to the event owner,
	     * if not, then this event is followed by the calendar owner.
	     */
	    if (!ev.owner.equals(this.owner)) {
		followingEvents.add(ev);
	    }
	}
	return followingEvents;
    }
=======
	public List<DayContainer> getCalendarData(Date currentDate) {
		DateTime date = new DateTime(currentDate);

		DateTime now = new DateTime();
		DateTime firstDayOfMonth = date.withDayOfMonth(1);
		DateTime runDay = firstDayOfMonth.minusDays(firstDayOfMonth.dayOfWeek()
				.get());

		DayContainer[] days = new DayContainer[42];

		for (int i = 0; i < days.length; i++) {
			days[i] = new DayContainer();
			runDay = runDay.plusDays(1);
			days[i].date = runDay.toDate();
			DayContainer.DayContainerType type = DayContainer.DayContainerType.THISMONTH;
			if (runDay.getDayOfMonth() == date.getDayOfMonth()
					&& runDay.getMonthOfYear() == date.getMonthOfYear()
					&& runDay.getYear() == date.getYear()) {
				type = DayContainer.DayContainerType.SELECTED;
			} else if (runDay.getDayOfMonth() == now.getDayOfMonth()
					&& runDay.getMonthOfYear() == now.getMonthOfYear()
					&& runDay.getYear() == now.getYear()) {
				type = DayContainer.DayContainerType.TODAY;
			} else if (!runDay.monthOfYear().equals(date.monthOfYear())) {
				type = DayContainer.DayContainerType.OTHERMONTH;
			}
			days[i].type = type;
			days[i].containsEvents = (this.eventsAtDay(runDay.toDate()).size() > 0);
		}
		return (List<DayContainer>) Arrays.asList(days);
	}

	public List<Event> eventsAtDay(Date currentDate) {
		Query eventsQuery = JPA.em()
				.createQuery("SELECT e FROM Event e WHERE e.calendar.id = :id")
				.setParameter("id", this.id);
		List<Event> results = eventsQuery.getResultList();
		List<Event> events = new ArrayList<Event>();
		for (Event e : results) {
			if (e.happensOnDay(currentDate)) {
				events.add(e);
			}
		}
		return events;
	}
>>>>>>> origin/exp_gui
}
